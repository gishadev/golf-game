//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Project/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace gisha.golf
{
    public partial class @CustomInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CustomInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""df45c6bf-124b-4ac0-84cf-31baf1cd3382"",
            ""actions"": [
                {
                    ""name"": ""ClubScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""ca514a5a-7cb3-4ca9-9b2d-387ad866f8fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ClubDown"",
                    ""type"": ""Value"",
                    ""id"": ""e6b92c41-f7ac-40e0-ab9d-631a5ecd130d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ClubUp"",
                    ""type"": ""Value"",
                    ""id"": ""d4e80a4a-daab-421a-87ce-6147bd83d05e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""683e18d6-f879-4579-b0df-60d16f6888a2"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""ClubScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd94ab32-b05e-47dd-9b8b-d015e26e7dbc"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""ClubScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05cdce52-0197-470b-b475-b61455a4072c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""ClubDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d62bd7f5-5de4-4976-b632-b13e2a185607"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""ClubDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22e2d046-a3c3-4405-af80-1db641ec1798"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""ClubUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""653f0feb-25a5-4fc9-8543-bc268ca3321b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""ClubUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse&Keyboard"",
            ""bindingGroup"": ""Mouse&Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>/{Back}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>/{Back}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>/{Back}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_ClubScreenPosition = m_Gameplay.FindAction("ClubScreenPosition", throwIfNotFound: true);
            m_Gameplay_ClubDown = m_Gameplay.FindAction("ClubDown", throwIfNotFound: true);
            m_Gameplay_ClubUp = m_Gameplay.FindAction("ClubUp", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_ClubScreenPosition;
        private readonly InputAction m_Gameplay_ClubDown;
        private readonly InputAction m_Gameplay_ClubUp;
        public struct GameplayActions
        {
            private @CustomInput m_Wrapper;
            public GameplayActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ClubScreenPosition => m_Wrapper.m_Gameplay_ClubScreenPosition;
            public InputAction @ClubDown => m_Wrapper.m_Gameplay_ClubDown;
            public InputAction @ClubUp => m_Wrapper.m_Gameplay_ClubUp;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @ClubScreenPosition.started += instance.OnClubScreenPosition;
                @ClubScreenPosition.performed += instance.OnClubScreenPosition;
                @ClubScreenPosition.canceled += instance.OnClubScreenPosition;
                @ClubDown.started += instance.OnClubDown;
                @ClubDown.performed += instance.OnClubDown;
                @ClubDown.canceled += instance.OnClubDown;
                @ClubUp.started += instance.OnClubUp;
                @ClubUp.performed += instance.OnClubUp;
                @ClubUp.canceled += instance.OnClubUp;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @ClubScreenPosition.started -= instance.OnClubScreenPosition;
                @ClubScreenPosition.performed -= instance.OnClubScreenPosition;
                @ClubScreenPosition.canceled -= instance.OnClubScreenPosition;
                @ClubDown.started -= instance.OnClubDown;
                @ClubDown.performed -= instance.OnClubDown;
                @ClubDown.canceled -= instance.OnClubDown;
                @ClubUp.started -= instance.OnClubUp;
                @ClubUp.performed -= instance.OnClubUp;
                @ClubUp.canceled -= instance.OnClubUp;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse&Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        private int m_TouchscreenSchemeIndex = -1;
        public InputControlScheme TouchscreenScheme
        {
            get
            {
                if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
                return asset.controlSchemes[m_TouchscreenSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnClubScreenPosition(InputAction.CallbackContext context);
            void OnClubDown(InputAction.CallbackContext context);
            void OnClubUp(InputAction.CallbackContext context);
        }
    }
}
